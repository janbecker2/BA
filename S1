var grindavik = geometry

var s1_collection_pre = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(grindavik)
  .filterDate(ee.Date('2023-10-01'), ee.Date('2023-12-15'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  .select(['VV', 'VH'])
  .median()
  .clip(grindavik);

var VV_VH_pre = s1_collection_pre.select('VV').subtract(s1_collection_pre.select('VH')).rename('VV_VH');
var s1_pre = s1_collection_pre.select(['VV', 'VH']).addBands(VV_VH_pre);
print(s1_pre);

var s1_collection_post_1 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(grindavik)
  .filterDate(ee.Date('2023-12-18'), ee.Date('2024-01-13'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  .select(['VV', 'VH'])
  .mean()
  .clip(grindavik);

var VV_VH_post_1 = s1_collection_post_1.select('VV').subtract(s1_collection_post_1.select('VH')).rename('VV_VH');
var s1_post_1 = s1_collection_post_1.select(['VV', 'VH']).addBands(VV_VH_post_1);
print(s1_post_1);

var s1_collection_post_2 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(grindavik)
  .filterDate(ee.Date('2024-01-14'), ee.Date('2024-02-07'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  .select(['VV', 'VH'])
  .median()
  .clip(grindavik);

var VV_VH_post_2 = s1_collection_post_2.select('VV').subtract(s1_collection_post_2.select('VH')).rename('VV_VH');
var s1_post_2 = s1_collection_post_2.select(['VV', 'VH']).addBands(VV_VH_post_2);
print(s1_post_2);

var s1_collection_post_3 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(grindavik)
  .filterDate(ee.Date('2024-02-08'), ee.Date('2024-03-15'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  .select(['VV', 'VH'])
  .median()
  .clip(grindavik);

var VV_VH_post_3 = s1_collection_post_3.select('VV').subtract(s1_collection_post_3.select('VH')).rename('VV_VH');
var s1_post_3 = s1_collection_post_3.select(['VV', 'VH']).addBands(VV_VH_post_3);
print(s1_post_3);

var s1_collection_post_4 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(grindavik)
  .filterDate(ee.Date('2024-03-16'), ee.Date('2024-05-28'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  .select(['VV', 'VH'])
  .median()
  .clip(grindavik);

var VV_VH_post_4 = s1_collection_post_4.select('VV').subtract(s1_collection_post_4.select('VH')).rename('VV_VH');
var s1_post_4 = s1_collection_post_4.select(['VV', 'VH']).addBands(VV_VH_post_4);
print(s1_post_4);

post_16_03_24_lee = post_16_03_24_lee.rename(['VV', 'VH', 'VV_VH']);
pre_lee = pre_lee.rename(['VV', 'VH', 'VV_VH']);

Map.centerObject(grindavik, 10);
Map.addLayer(s1_post_1, {min: -20, max: 0}, "Post-Event Sentinel-1",false);
Map.addLayer(s1_post_2, {min: -20, max: 0}, "Post-Event Sentinel-1 2",false);
Map.addLayer(s1_post_3, {min: -20, max: 0}, "Post-Event Sentinel-1 3 ",false);
Map.addLayer(s1_post_4, {min: -20, max: 0}, "Post-Event Sentinel-1 4",false);


Map.addLayer(s1_pre, {min: -20, max: 0}, "Pre-Event Sentinel-1",false);
Map.addLayer(post_16_03_24_lee, {min: -20, max: 0}, "Post-Event Sentinel-1 Lee",false);
Map.addLayer(pre_lee, {min: -20, max: 0}, "Pre-Event Sentinel-1 Lee",false);

/*
Export.image.toDrive({
  image: s1_pre,
  description: 'Sentinel1_PreEvent_Grindavik_ASC',
  scale: 10,
  region: grindavik,
  fileFormat: 'GeoTIFF'});

Export.image.toDrive({
  image: s1_post_1,
  description: 'Sentinel1_PostEvent_Grindavik_18_12_23',
  scale: 10,
  region: grindavik,
  fileFormat: 'GeoTIFF'});
  
Export.image.toDrive({
  image: s1_post_4,
  description: 'Sentinel1_PostEvent_Grindavik_16_03_24',
  scale: 10,
  region: grindavik,
  fileFormat: 'GeoTIFF'});
*/

var difference = pre_lee.subtract(post_16_03_24_lee);
Map.addLayer(difference, {min: -20, max: 0}, "Diff",false);

Export.image.toDrive({
  image: difference,
  description: 'Sentinel1_Difference',
  scale: 10,
  region: grindavik,
  fileFormat: 'GeoTIFF'});
// Compute histograms for VV, VH, and VV_VH
var histogram_VV = difference.select('VV').reduceRegion({
  reducer: ee.Reducer.histogram(),
  geometry: geometry5,
  scale: 10,
  maxPixels: 1e9
});

var histogram_VH = difference.select('VH').reduceRegion({
  reducer: ee.Reducer.histogram(),
  geometry: geometry5,
  scale: 10,
  maxPixels: 1e9
});

var histogram_VV_VH = difference.select('VV_VH').reduceRegion({
  reducer: ee.Reducer.histogram(),
  geometry: geometry5,
  scale: 10,
  maxPixels: 1e9
});
print(histogram_VV)




var lava_mask = difference.select('VV').lt(0)  
  .and(difference.select('VH').lt(5))         
  .and(difference.select('VV_VH').gt(0))    
  .selfMask();  

var lavaVisParams = {
  min: 0, 
  max: 1, 
  palette: ['black', 'red']  // Lava in red
};
lava_mask = lava_mask.rename('lava')
Map.centerObject(grindavik, 10);
Map.addLayer(lava_mask, lavaVisParams, 'Lava Flow Detection',false);
print(lava_mask)

var sobelDiag1 = ee.Kernel.fixed(3, 3, [
    [ 2,  1,  0], 
    [ 1,  0, -1], 
    [ 0, -1, -2]
]);



//var diagonalSobel = s1_pre_lee.convolve(ee.Kernel.sobel(true)); // 'true' applies diagonal Sobel


// Visualization Parameters

var gaussianFiltered = difference.convolve(ee.Kernel.gaussian({
  radius: 3,  // Adjust the radius for smoothness
  sigma: 1.5,  // Standard deviation
  units: 'pixels'
}));

Map.addLayer(difference, {min: -20, max: 0}, "Diff gauss",false);


// Apply SNIC 
var snic = ee.Algorithms.Image.Segmentation.SNIC({
  image: difference,
  size: 80,  // smaller = finer  larger = smoother
  compactness: 0.1, // higher = more compact 
  connectivity: 4, 
})  

// Extract mean values
var VV_threshold = 1.5;
var VH_threshold = -1;
var VV_VH_threshold = -1;

// Create a binary mask using logical conditions
var vvMask = snic.select('VV_mean').lt(VV_threshold);
var vhMask = snic.select('VH_mean').lt(VH_threshold);
var vvVhMask = snic.select('VV_VH_mean').gt(VV_VH_threshold);

// Combine the conditions using logical AND
var mask = vvMask.and(vhMask).and(vvVhMask);

// Apply the mask to the SNIC image
var maskedImage = snic.updateMask(mask);

// Display on map
Map.addLayer(snic.randomVisualizer(), {}, 'SNIC');

Map.addLayer(maskedImage, {}, 'Thresholded SNIC');
var snicMean = difference.addBands(snic.reduceConnectedComponents({
  reducer: ee.Reducer.mean(),
  labelBand: 'clusters'  
}));

Export.image.toDrive({
  image: maskedImage.toFloat(),
  description: 'Masked_SNCI_Image',
  scale: 10,  // Adjust based on your dataset's resolution
  region: maskedImage.geometry(),  // Export only the region of interest
  fileFormat: 'GeoTIFF',
  maxPixels: 1e13  // Adjust based on data size limits
});

/*
var trainingPoints = lava.merge(no_lava)

var training = snicMean.sampleRegions({
  collection: trainingPoints,
  properties: ['landcover'],
  scale: 10
});

var classifier = ee.Classifier.smileRandomForest(100).train(training, 'landcover');

// Classify the SNIC Image
var classified = snicMean.classify(classifier);




var lavaVis = {min: 0, max: 1, palette: ['gray', 'red']};

// Add to Map
Map.centerObject(difference, 10);
Map.addLayer(snic.randomVisualizer(), {}, 'SNIC');
Map.addLayer(snicMean.randomVisualizer(), {}, 'SNIC Mean');

Map.addLayer(classified, lavaVis, 'Lava Classification (SNIC + CART)');
print(classified);
*/



var gaussianBlur = pre_lee.convolve(ee.Kernel.gaussian(2));

var diagonalSobel135 = ee.Kernel.fixed(3, 3, [
  [ 2,  1,  0],
  [ 1,  0, -1],
  [ 0, -1, -2]
]);
print(diagonalSobel135)

// Apply the diagonal Sobel filter
var edges135 = gaussianBlur.convolve(diagonalSobel135);

var visParams = {
  min: -0.2,
  max: 0.2,
  palette: ['blue', 'white', 'red']  // Adjust for better contrast
};

Map.addLayer(edges135, {min: 0, max: 1}, 'Sobel');

var cannyEdges = ee.Algorithms.CannyEdgeDetector({
  image: gaussianBlur,
  threshold: 1,   // Adjust sensitivity (between 0-1)
  sigma: 4.0        // Blur parameter to remove noise
});
Map.addLayer(cannyEdges	, {min: 0, max: 1}, 'Canny');
